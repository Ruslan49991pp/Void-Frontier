using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// UI –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–ª–µ–π
/// </summary>
public class TargetingInstructions : MonoBehaviour
{
    [Header("UI Settings")]
    public bool showInstructions = true;
    public float displayTime = 10f; // –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    public Color instructionColor = Color.white;

    private Text instructionText;
    private GameObject instructionPanel;
    private Canvas uiCanvas;

    void Start()
    {
        if (showInstructions)
        {
            CreateInstructionUI();
            ShowInstructions();
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å UI –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    /// </summary>
    void CreateInstructionUI()
    {
        // –ù–∞—Ö–æ–¥–∏–º Canvas
        uiCanvas = FindObjectOfType<Canvas>();
        if (uiCanvas == null)
        {
            GameObject canvasGO = new GameObject("InstructionCanvas");
            uiCanvas = canvasGO.AddComponent<Canvas>();
            uiCanvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasGO.AddComponent<CanvasScaler>();
            canvasGO.AddComponent<GraphicRaycaster>();
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        GameObject panelGO = new GameObject("TargetingInstructionsPanel");
        panelGO.transform.SetParent(uiCanvas.transform, false);

        instructionPanel = panelGO;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RectTransform –ø–∞–Ω–µ–ª–∏
        RectTransform panelRect = panelGO.AddComponent<RectTransform>();
        panelRect.anchorMin = new Vector2(0f, 1f);
        panelRect.anchorMax = new Vector2(1f, 1f);
        panelRect.pivot = new Vector2(0.5f, 1f);
        panelRect.anchoredPosition = new Vector2(0f, -10f);
        panelRect.sizeDelta = new Vector2(-20f, 150f);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω –ø–∞–Ω–µ–ª–∏
        Image panelImage = panelGO.AddComponent<Image>();
        panelImage.color = new Color(0f, 0f, 0f, 0.8f);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        GameObject textGO = new GameObject("InstructionText");
        textGO.transform.SetParent(panelGO.transform, false);

        instructionText = textGO.AddComponent<Text>();
        instructionText.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
        instructionText.fontSize = 14;
        instructionText.color = instructionColor;
        instructionText.alignment = TextAnchor.MiddleCenter;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RectTransform —Ç–µ–∫—Å—Ç–∞
        RectTransform textRect = textGO.GetComponent<RectTransform>();
        textRect.anchorMin = Vector2.zero;
        textRect.anchorMax = Vector2.one;
        textRect.offsetMin = new Vector2(10f, 10f);
        textRect.offsetMax = new Vector2(-10f, -10f);
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    /// </summary>
    void ShowInstructions()
    {
        if (instructionText != null)
        {
            string instructions = "üéØ –°–ò–°–¢–ï–ú–ê –£–ö–ê–ó–ê–ù–ò–Ø –¶–ï–õ–ï–ô\n" +
                                 "1. –í—ã–¥–µ–ª–∏—Ç–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ (–õ–ö–ú –∏–ª–∏ —Ä–∞–º–∫–æ–π)\n" +
                                 "2. –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –≤—Ä–∞–≥–∞ - –æ–Ω –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º\n" +
                                 "3. –ù–∞–∂–º–∏—Ç–µ –õ–ö–ú –Ω–∞ –≤—Ä–∞–≥–µ - –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —é–Ω–∏—Ç—ã –±—É–¥—É—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –Ω–∏–º\n" +
                                 "4. –ö—Ä–∞—Å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥ –≤—Ä–∞–≥–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∑–∞ –Ω–∏–º —Å–ª–µ–¥—É—é—Ç\n" +
                                 "5. –ü–ö–ú –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, —Å–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ";

            instructionText.text = instructions;

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            if (displayTime > 0)
            {
                Invoke(nameof(HideInstructions), displayTime);
            }
        }
    }

    /// <summary>
    /// –°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    /// </summary>
    void HideInstructions()
    {
        if (instructionPanel != null)
        {
            instructionPanel.SetActive(false);
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏)
    /// </summary>
    public void ShowInstructionsAgain()
    {
        if (instructionPanel != null)
        {
            instructionPanel.SetActive(true);

            // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
            if (displayTime > 0)
            {
                Invoke(nameof(HideInstructions), displayTime);
            }
        }
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    /// </summary>
    public void ToggleInstructions()
    {
        if (instructionPanel != null)
        {
            bool isActive = instructionPanel.activeSelf;
            instructionPanel.SetActive(!isActive);

            // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä—ã—Ç–∏–µ
            if (!isActive && displayTime > 0)
            {
                Invoke(nameof(HideInstructions), displayTime);
            }
        }
    }

    void OnDestroy()
    {
        // –û—á–∏—Å—Ç–∫–∞ UI
        if (instructionPanel != null)
        {
            DestroyImmediate(instructionPanel);
        }
    }
}